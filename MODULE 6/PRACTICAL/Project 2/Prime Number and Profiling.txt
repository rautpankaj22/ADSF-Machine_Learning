import time
import math
import cProfile

# --------------------------
# Step 1: Naive Prime Checker
# --------------------------
def is_prime_naive(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

# --------------------------
# Step 2: Optimized Prime Checker
# --------------------------
def is_prime_optimized(n):
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

# --------------------------
# Step 3: Run tests on both versions
# --------------------------
def run_test(prime_func, label):
    print(f"\nTesting {label}...")
    start_time = time.time()

    count = 0
    for num in range(1, 100000):
        if prime_func(num):
            count += 1

    end_time = time.time()
    print(f"{label}: Found {count} prime numbers in {end_time - start_time:.4f} seconds.")

# --------------------------
# Step 4: Profile performance
# --------------------------
def profile_function(func):
    print("\nProfiling function with cProfile:")
    cProfile.runctx("run_test(func, func.__name__)", globals(), {'func': func})


# --------------------------
# Main Entry
# --------------------------
if __name__ == "__main__":
    print("Prime Number Performance Comparison")

    # Run both versions
    run_test(is_prime_naive, "Naive Version")
    run_test(is_prime_optimized, "Optimized Version")

    # Profile optimized version
    profile_function(is_prime_optimized)
